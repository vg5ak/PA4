
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 24 23:05:36 EST 2019
//----------------------------------------------------

package mjparser;

import ast.node.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 24 23:05:36 EST 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\010\000\002\003\006\000\002\003\006" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\006\000\002\003\010\000\002\004\005" +
    "\000\002\004\013\000\002\004\007\000\002\004\007\000" +
    "\002\004\011\000\002\004\007\000\002\004\011\000\002" +
    "\004\011\000\002\005\004\000\002\005\002\000\002\010" +
    "\003\000\002\007\005\000\002\013\006\000\002\013\004" +
    "\000\002\013\002\000\002\012\005\000\002\012\002\000" +
    "\002\011\005\000\002\011\003\000\002\011\002\000\002" +
    "\015\014\000\002\020\004\000\002\020\002\000\002\016" +
    "\007\000\002\017\004\000\002\017\002\000\002\021\002" +
    "\000\002\022\002\000\002\006\023" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\017\005\001\002\000\004\002\237\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\214\001\002\000" +
    "\006\002\uffc9\037\uffc9\001\002\000\006\002\000\037\013" +
    "\001\002\000\004\061\015\001\002\000\006\002\uffca\037" +
    "\uffca\001\002\000\032\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030" +
    "\uffd8\044\uffd8\001\002\000\004\011\017\001\002\000\006" +
    "\012\uffcc\032\uffcc\001\002\000\006\012\021\032\022\001" +
    "\002\000\006\002\uffcb\037\uffcb\001\002\000\020\013\031" +
    "\014\033\015\026\036\032\047\027\050\030\051\024\001" +
    "\002\000\006\012\uffcd\032\uffcd\001\002\000\004\061\ufffa" +
    "\001\002\000\004\061\015\001\002\000\004\061\ufffe\001" +
    "\002\000\004\061\ufffb\001\002\000\004\061\ufff9\001\002" +
    "\000\004\061\uffff\001\002\000\004\061\ufffc\001\002\000" +
    "\004\061\ufffd\001\002\000\004\007\035\001\002\000\024" +
    "\010\uffd4\013\031\014\033\015\026\027\uffd4\036\032\047" +
    "\027\050\030\051\024\001\002\000\006\010\042\027\041" +
    "\001\002\000\004\061\015\001\002\000\006\010\uffd5\027" +
    "\uffd5\001\002\000\020\013\031\014\033\015\026\036\032" +
    "\047\027\050\030\051\024\001\002\000\004\011\043\001" +
    "\002\000\056\005\uffd9\007\uffd9\011\uffd9\012\uffd9\020\uffd9" +
    "\025\uffd9\026\uffd9\031\uffd9\033\uffd9\052\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000\056\005" +
    "\067\007\057\011\060\012\uffd2\020\056\025\051\026\050" +
    "\031\071\033\052\052\063\054\045\055\073\056\074\057" +
    "\065\060\062\061\015\062\053\063\066\064\064\065\070" +
    "\066\055\067\061\001\002\000\004\007\204\001\002\000" +
    "\056\005\uffda\007\uffda\011\uffda\012\uffda\020\uffda\025\uffda" +
    "\026\uffda\031\uffda\033\uffda\052\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\001\002\000\026\004\uffe6\005" +
    "\uffe6\006\uffe6\010\uffe6\022\uffe6\023\uffe6\024\uffe6\027\uffe6" +
    "\030\uffe6\044\uffe6\001\002\000\004\007\200\001\002\000" +
    "\036\005\067\007\057\025\051\031\071\056\074\057\065" +
    "\060\062\061\015\062\053\063\066\064\064\065\070\066" +
    "\055\067\061\001\002\000\036\005\067\007\057\025\051" +
    "\031\071\056\074\057\065\060\062\061\015\062\053\063" +
    "\066\064\064\065\070\066\055\067\061\001\002\000\026" +
    "\004\uffea\005\uffea\006\uffea\010\uffea\022\uffea\023\uffea\024" +
    "\uffea\027\uffea\030\uffea\044\uffea\001\002\000\020\004\102" +
    "\005\104\006\105\022\100\023\103\024\101\030\167\001" +
    "\002\000\026\004\uffeb\005\uffeb\006\uffeb\010\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\027\uffeb\030\uffeb\044\uffeb\001\002\000" +
    "\004\007\161\001\002\000\040\005\067\007\057\015\155" +
    "\025\051\031\071\056\074\057\065\060\062\061\015\062" +
    "\053\063\066\064\064\065\070\066\055\067\061\001\002" +
    "\000\054\005\uffd9\007\uffd9\011\uffd9\012\uffd9\020\uffd9\025" +
    "\uffd9\026\uffd9\031\uffd9\052\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\001\002\000\026\004\uffe5\005\uffe5" +
    "\006\uffe5\010\uffe5\022\uffe5\023\uffe5\024\uffe5\027\uffe5\030" +
    "\uffe5\044\uffe5\001\002\000\026\004\uffee\005\uffee\006\uffee" +
    "\010\uffee\022\uffee\023\uffee\024\uffee\027\uffee\030\uffee\044" +
    "\uffee\001\002\000\004\007\142\001\002\000\026\004\uffed" +
    "\005\uffed\006\uffed\010\uffed\022\uffed\023\uffed\024\uffed\027" +
    "\uffed\030\uffed\044\uffed\001\002\000\004\007\137\001\002" +
    "\000\026\004\uffe9\005\uffe9\006\uffe9\010\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\027\uffe9\030\uffe9\044\uffe9\001\002\000\036" +
    "\005\067\007\057\025\051\031\071\056\074\057\065\060" +
    "\062\061\015\062\053\063\066\064\064\065\070\066\055" +
    "\067\061\001\002\000\026\004\uffec\005\uffec\006\uffec\010" +
    "\uffec\022\uffec\023\uffec\024\uffec\027\uffec\030\uffec\044\uffec" +
    "\001\002\000\004\061\015\001\002\000\004\012\132\001" +
    "\002\000\004\007\126\001\002\000\004\007\075\001\002" +
    "\000\036\005\067\007\057\025\051\031\071\056\074\057" +
    "\065\060\062\061\015\062\053\063\066\064\064\065\070" +
    "\066\055\067\061\001\002\000\022\004\102\005\104\006" +
    "\105\022\100\023\103\024\101\027\077\030\106\001\002" +
    "\000\036\005\067\007\057\025\051\031\071\056\074\057" +
    "\065\060\062\061\015\062\053\063\066\064\064\065\070" +
    "\066\055\067\061\001\002\000\036\005\067\007\057\025" +
    "\051\031\071\056\074\057\065\060\062\061\015\062\053" +
    "\063\066\064\064\065\070\066\055\067\061\001\002\000" +
    "\036\005\067\007\057\025\051\031\071\056\074\057\065" +
    "\060\062\061\015\062\053\063\066\064\064\065\070\066" +
    "\055\067\061\001\002\000\036\005\067\007\057\025\051" +
    "\031\071\056\074\057\065\060\062\061\015\062\053\063" +
    "\066\064\064\065\070\066\055\067\061\001\002\000\036" +
    "\005\067\007\057\025\051\031\071\056\074\057\065\060" +
    "\062\061\015\062\053\063\066\064\064\065\070\066\055" +
    "\067\061\001\002\000\036\005\067\007\057\025\051\031" +
    "\071\056\074\057\065\060\062\061\015\062\053\063\066" +
    "\064\064\065\070\066\055\067\061\001\002\000\036\005" +
    "\067\007\057\025\051\031\071\056\074\057\065\060\062" +
    "\061\015\062\053\063\066\064\064\065\070\066\055\067" +
    "\061\001\002\000\004\061\015\001\002\000\004\007\110" +
    "\001\002\000\042\005\067\007\057\010\uffcf\025\051\027" +
    "\uffcf\031\071\056\074\057\065\060\062\061\015\062\053" +
    "\063\066\064\064\065\070\066\055\067\061\001\002\000" +
    "\006\010\114\027\113\001\002\000\024\004\102\005\104" +
    "\006\105\010\uffd0\022\100\023\103\024\101\027\uffd0\030" +
    "\106\001\002\000\036\005\067\007\057\025\051\031\071" +
    "\056\074\057\065\060\062\061\015\062\053\063\066\064" +
    "\064\065\070\066\055\067\061\001\002\000\026\004\uffe3" +
    "\005\uffe3\006\uffe3\010\uffe3\022\uffe3\023\uffe3\024\uffe3\027" +
    "\uffe3\030\uffe3\044\uffe3\001\002\000\024\004\102\005\104" +
    "\006\105\010\uffd1\022\100\023\103\024\101\027\uffd1\030" +
    "\106\001\002\000\026\004\102\005\104\006\ufff4\010\ufff4" +
    "\022\ufff4\023\103\024\101\027\ufff4\030\106\044\ufff4\001" +
    "\002\000\026\004\ufff5\005\ufff5\006\ufff5\010\ufff5\022\ufff5" +
    "\023\103\024\ufff5\027\ufff5\030\106\044\ufff5\001\002\000" +
    "\026\004\ufff7\005\ufff7\006\ufff7\010\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\027\ufff7\030\106\044\ufff7\001\002\000\026\004" +
    "\ufff6\005\104\006\ufff6\010\ufff6\022\ufff6\023\103\024\ufff6" +
    "\027\ufff6\030\106\044\ufff6\001\002\000\026\004\102\005" +
    "\104\006\ufff8\010\ufff8\022\ufff8\023\103\024\ufff8\027\ufff8" +
    "\030\106\044\ufff8\001\002\000\026\004\102\005\104\006" +
    "\ufff3\010\ufff3\022\ufff3\023\103\024\101\027\ufff3\030\106" +
    "\044\ufff3\001\002\000\022\004\102\005\104\006\105\010" +
    "\125\022\100\023\103\024\101\030\106\001\002\000\026" +
    "\004\ufff1\005\ufff1\006\ufff1\010\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\027\ufff1\030\ufff1\044\ufff1\001\002\000\036\005\067" +
    "\007\057\025\051\031\071\056\074\057\065\060\062\061" +
    "\015\062\053\063\066\064\064\065\070\066\055\067\061" +
    "\001\002\000\022\004\102\005\104\006\105\010\130\022" +
    "\100\023\103\024\101\030\106\001\002\000\004\044\131" +
    "\001\002\000\060\005\uffe0\007\uffe0\011\uffe0\012\uffe0\020" +
    "\uffe0\021\uffe0\025\uffe0\026\uffe0\031\uffe0\033\uffe0\052\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\006\012\uffce\032\uffce\001\002\000\004\007\134\001" +
    "\002\000\004\010\135\001\002\000\026\004\uffe4\005\uffe4" +
    "\006\uffe4\010\uffe4\022\uffe4\023\uffe4\024\uffe4\027\uffe4\030" +
    "\uffe4\044\uffe4\001\002\000\026\004\ufff2\005\ufff2\006\ufff2" +
    "\010\ufff2\022\ufff2\023\ufff2\024\ufff2\027\ufff2\030\ufff2\044" +
    "\ufff2\001\002\000\036\005\067\007\057\025\051\031\071" +
    "\056\074\057\065\060\062\061\015\062\053\063\066\064" +
    "\064\065\070\066\055\067\061\001\002\000\022\004\102" +
    "\005\104\006\105\010\141\022\100\023\103\024\101\030" +
    "\106\001\002\000\026\004\ufff0\005\ufff0\006\ufff0\010\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\027\ufff0\030\ufff0\044\ufff0\001" +
    "\002\000\036\005\067\007\057\025\051\031\071\056\074" +
    "\057\065\060\062\061\015\062\053\063\066\064\064\065" +
    "\070\066\055\067\061\001\002\000\022\004\102\005\104" +
    "\006\105\022\100\023\103\024\101\027\144\030\106\001" +
    "\002\000\036\005\067\007\057\025\051\031\071\056\074" +
    "\057\065\060\062\061\015\062\053\063\066\064\064\065" +
    "\070\066\055\067\061\001\002\000\022\004\102\005\104" +
    "\006\105\022\100\023\103\024\101\027\146\030\106\001" +
    "\002\000\036\005\067\007\057\025\051\031\071\056\074" +
    "\057\065\060\062\061\015\062\053\063\066\064\064\065" +
    "\070\066\055\067\061\001\002\000\022\004\102\005\104" +
    "\006\105\010\150\022\100\023\103\024\101\030\106\001" +
    "\002\000\004\044\151\001\002\000\060\005\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031" +
    "\uffe1\033\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\001\002\000\054\005\067\007\057\011\060" +
    "\012\153\020\056\025\051\026\050\031\071\052\063\054" +
    "\045\055\073\056\074\057\065\060\062\061\015\062\053" +
    "\063\066\064\064\065\070\066\055\067\061\001\002\000" +
    "\060\005\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2" +
    "\025\uffe2\026\uffe2\031\uffe2\033\uffe2\052\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\022\004" +
    "\102\005\104\006\105\010\160\022\100\023\103\024\101" +
    "\030\106\001\002\000\004\010\156\001\002\000\036\005" +
    "\067\007\057\025\051\031\071\056\074\057\065\060\062" +
    "\061\015\062\053\063\066\064\064\065\070\066\055\067" +
    "\061\001\002\000\026\004\uffef\005\uffef\006\uffef\010\uffef" +
    "\022\uffef\023\uffef\024\uffef\027\uffef\030\uffef\044\uffef\001" +
    "\002\000\026\004\uffe7\005\uffe7\006\uffe7\010\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\027\uffe7\030\uffe7\044\uffe7\001\002\000" +
    "\036\005\067\007\057\025\051\031\071\056\074\057\065" +
    "\060\062\061\015\062\053\063\066\064\064\065\070\066" +
    "\055\067\061\001\002\000\022\004\102\005\104\006\105" +
    "\010\163\022\100\023\103\024\101\030\106\001\002\000" +
    "\052\005\067\007\057\011\060\020\056\025\051\026\050" +
    "\031\071\052\063\054\045\055\073\056\074\057\065\060" +
    "\062\061\015\062\053\063\066\064\064\065\070\066\055" +
    "\067\061\001\002\000\060\005\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\020\uffdf\021\uffdf\025\uffdf\026\uffdf\031\uffdf\033\uffdf" +
    "\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\001\002\000\052\005\067\007\057\011\060\020\056\025" +
    "\051\026\050\031\071\052\063\054\045\055\073\056\074" +
    "\057\065\060\062\061\015\062\053\063\066\064\064\065" +
    "\070\066\055\067\061\001\002\000\060\005\uffde\007\uffde" +
    "\011\uffde\012\uffde\020\uffde\021\uffde\025\uffde\026\uffde\031" +
    "\uffde\033\uffde\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\001\002\000\004\061\015\001\002\000\004" +
    "\007\171\001\002\000\042\005\067\007\057\010\uffcf\025" +
    "\051\027\uffcf\031\071\056\074\057\065\060\062\061\015" +
    "\062\053\063\066\064\064\065\070\066\055\067\061\001" +
    "\002\000\006\010\173\027\113\001\002\000\022\004\uffe3" +
    "\005\uffe3\006\uffe3\022\uffe3\023\uffe3\024\uffe3\030\uffe3\044" +
    "\174\001\002\000\060\005\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\020\uffdc\021\uffdc\025\uffdc\026\uffdc\031\uffdc\033\uffdc\052" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\001" +
    "\002\000\022\004\102\005\104\006\105\022\100\023\103" +
    "\024\101\030\106\044\176\001\002\000\004\012\uffd3\001" +
    "\002\000\026\004\uffe8\005\uffe8\006\uffe8\010\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\027\uffe8\030\uffe8\044\uffe8\001\002\000" +
    "\036\005\067\007\057\025\051\031\071\056\074\057\065" +
    "\060\062\061\015\062\053\063\066\064\064\065\070\066" +
    "\055\067\061\001\002\000\022\004\102\005\104\006\105" +
    "\010\202\022\100\023\103\024\101\030\106\001\002\000" +
    "\052\005\067\007\057\011\060\020\056\025\051\026\050" +
    "\031\071\052\063\054\045\055\073\056\074\057\065\060" +
    "\062\061\015\062\053\063\066\064\064\065\070\066\055" +
    "\067\061\001\002\000\060\005\uffdd\007\uffdd\011\uffdd\012" +
    "\uffdd\020\uffdd\021\uffdd\025\uffdd\026\uffdd\031\uffdd\033\uffdd" +
    "\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\001\002\000\036\005\067\007\057\025\051\031\071\056" +
    "\074\057\065\060\062\061\015\062\053\063\066\064\064" +
    "\065\070\066\055\067\061\001\002\000\022\004\102\005" +
    "\104\006\105\022\100\023\103\024\101\027\206\030\106" +
    "\001\002\000\036\005\067\007\057\025\051\031\071\056" +
    "\074\057\065\060\062\061\015\062\053\063\066\064\064" +
    "\065\070\066\055\067\061\001\002\000\022\004\102\005" +
    "\104\006\105\010\210\022\100\023\103\024\101\030\106" +
    "\001\002\000\004\044\211\001\002\000\060\005\uffdb\007" +
    "\uffdb\011\uffdb\012\uffdb\020\uffdb\021\uffdb\025\uffdb\026\uffdb" +
    "\031\uffdb\033\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\001\002\000\004\061\015\001\002\000" +
    "\006\010\uffd6\027\uffd6\001\002\000\004\011\uffc8\001\002" +
    "\000\004\011\216\001\002\000\004\032\217\001\002\000" +
    "\004\034\220\001\002\000\004\036\221\001\002\000\004" +
    "\016\222\001\002\000\004\007\223\001\002\000\004\035" +
    "\224\001\002\000\004\041\225\001\002\000\004\042\226" +
    "\001\002\000\004\061\227\001\002\000\004\010\230\001" +
    "\002\000\004\011\231\001\002\000\054\005\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\020\uffd9\025\uffd9\026\uffd9\031\uffd9\052" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001" +
    "\002\000\004\012\uffc7\001\002\000\004\012\234\001\002" +
    "\000\006\002\uffc6\037\uffc6\001\002\000\054\005\067\007" +
    "\057\011\060\012\236\020\056\025\051\026\050\031\071" +
    "\052\063\054\045\055\073\056\074\057\065\060\062\061" +
    "\015\062\053\063\066\064\064\065\070\066\055\067\061" +
    "\001\002\000\004\012\uffd7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\004\017\011\001\001\000\004\016" +
    "\013\001\001\000\004\010\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\017\001" +
    "\001\000\004\015\022\001\001\000\002\001\001\000\004" +
    "\014\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\035\014\036" +
    "\001\001\000\002\001\001\000\004\010\037\001\001\000" +
    "\002\001\001\000\004\014\211\001\001\000\002\001\001" +
    "\000\004\005\043\001\001\000\012\003\053\004\045\010" +
    "\046\012\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\176\010" +
    "\046\001\001\000\006\003\174\010\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\153\010\046\001\001\000\004\005\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\135\010\046\001\001\000\002\001\001\000" +
    "\004\010\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\075\010\046\001\001\000" +
    "\002\001\001\000\006\003\123\010\046\001\001\000\006" +
    "\003\122\010\046\001\001\000\006\003\121\010\046\001" +
    "\001\000\006\003\120\010\046\001\001\000\006\003\117" +
    "\010\046\001\001\000\006\003\116\010\046\001\001\000" +
    "\006\003\115\010\046\001\001\000\004\010\106\001\001" +
    "\000\002\001\001\000\010\003\111\010\046\011\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\114" +
    "\010\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\126\010\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\137\010\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\142" +
    "\010\046\001\001\000\002\001\001\000\006\003\144\010" +
    "\046\001\001\000\002\001\001\000\006\003\146\010\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\053\004\045\010\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\156\010\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\161\010\046\001\001\000\002\001\001\000" +
    "\010\003\053\004\163\010\046\001\001\000\002\001\001" +
    "\000\010\003\053\004\165\010\046\001\001\000\002\001" +
    "\001\000\004\010\167\001\001\000\002\001\001\000\010" +
    "\003\111\010\046\011\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\200\010\046\001" +
    "\001\000\002\001\001\000\010\003\053\004\202\010\046" +
    "\001\001\000\002\001\001\000\006\003\204\010\046\001" +
    "\001\000\002\001\001\000\006\003\206\010\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\212\001\001\000\002\001\001\000\004\021\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\231\001\001" +
    "\000\004\005\234\001\001\000\004\022\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\053\004\045" +
    "\010\046\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out;

    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN block_statement NT$1 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement list = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
              /*System.out.println("Generate epilog using avrF.rtl.s");
          InputStream mainEpilogue=null;BufferedReader reader2=null;
          try {
          mainEpilogue
              = this.getClass().getClassLoader().getResourceAsStream(
                  "avrF.rtl.s");
          reader2 = new BufferedReader(new
              InputStreamReader(mainEpilogue));

          String line = null;
          while ((line = reader2.readLine()) != null) {
            parser.out.println(line);
          }
          } catch ( Exception e2) {
          e2.printStackTrace();
          }
          finally{
          try{
              if(mainEpilogue!=null) mainEpilogue.close();
              if(reader2!=null) reader2.close();
          }
          catch (IOException e) {
             e.printStackTrace();
          }
      }
            parser.out.flush();*/
            RESULT = new MainClass(op.line, op.pos, name.lexeme,param.lexeme, list);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement list = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 /*java.io.PrintStream sout
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);*/
                // Check filename is class name, if not exit with error message
                if(!parser.programName.equals(name.lexeme+".java"))
                {
                    System.exit(0);
                }


            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // class_list ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class_list ::= class_list class_declaration 
            {
              LinkedList<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IClassDecl c = (IClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 list.add(c); RESULT = list; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // class_declaration ::= CLASS identifier LBRACE method_list RBRACE 
            {
              IClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral i = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new TopClassDecl(c.line, c.pos, i.getLexeme(), new LinkedList<VarDecl>(), m);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		RESULT = new LinkedList<MethodDecl>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_list ::= method_list method_declaration 
            {
              LinkedList<MethodDecl> RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> s1 = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl s2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 s1.add(s2); RESULT = s1;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_declaration ::= PUBLIC type identifier LPAREN formals RPAREN LBRACE statement_list return RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int formleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int formright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		LinkedList<Formal> form = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IStatement> sl = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MethodDecl(p.line, p.pos, t, id.getLexeme(), form , new LinkedList<VarDecl>(), sl, r);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arguments ::= 
            {
              List<IExp> RESULT =null;
		RESULT = new LinkedList<IExp>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arguments ::= exp 
            {
              List<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IExp> l = new LinkedList<IExp>();
        l.add(e);
        RESULT = l;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arguments ::= arguments COMMA exp 
            {
              List<IExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> a = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		a.add(e); RESULT = a;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // return ::= 
            {
              IExp RESULT =null;
		RESULT = null;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // return ::= RETURN exp SEMI 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = e;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formals ::= 
            {
              LinkedList<Formal> RESULT =null;
		RESULT = new LinkedList<Formal>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formals ::= type identifier 
            {
              LinkedList<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral i = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  Formal formal2 = new Formal(t.getLine(), t.getPos(), t, i.getLexeme());
        LinkedList<Formal> fo = new LinkedList<Formal>();
        fo.add(formal2);
        RESULT = fo;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formals ::= formals COMMA type identifier 
            {
              LinkedList<Formal> RESULT =null;
		int foleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<Formal> fo = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral i = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 Formal formal = new Formal(t.getLine(), t.getPos(), t, i.getLexeme());
        fo.add(formal);
        RESULT = fo;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block_statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> s1 = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = new BlockStatement(l.line, l.pos, s1);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identifier ::= ID 
            {
              IdLiteral RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.lexeme);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_list ::= 
            {
              List<IStatement> RESULT =null;
		RESULT = new LinkedList<IStatement>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_list ::= statement_list statement 
            {
              List<IStatement> RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> s1 = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 s1.add(s2); RESULT = s1;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(m.line, m.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= exp DOT identifier LPAREN arguments RPAREN SEMI 
            {
              IStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IdLiteral i = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> args = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new CallStatement(a.getLine(), a.getPos(), a, i.getLexeme(), args);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line, op.pos, a, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement c = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, a, b, c);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, a, b, null);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(m.line, m.pos, a);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(m.line, m.pos, a, b, c);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> a = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = new BlockStatement(l.line,l.pos,a);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp DOT identifier LPAREN arguments RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral i = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> args = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new CallExp(a.getLine(), a.getPos(), a, i.getLexeme(), args);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= NEW identifier LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		RESULT = new NewExp(n.line, n.pos, id.getLexeme());
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= identifier 
            {
              IExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral i = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = i;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = a;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(op.line, op.pos, a);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new FalseLiteral(t.line, t.pos, t.lexeme, t.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(a.line, a.pos, a.lexeme, a.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(b.line, b.pos, b.lexeme, b.value);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(a.line, a.pos, a.lexeme, a.value);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(a.getLine(), a.getPos(), (IExp)a);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, a);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, a,b);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line, op.pos, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new MulExp(op.line, op.pos, a, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new MinusExp(op.line, op.pos, a, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new PlusExp(op.line, op.pos, a, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new EqualExp(op.line, op.pos, a, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new AndExp(op.line, op.pos, a, b);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ButtonType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ColorType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= VOID 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new VoidType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= INT 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new IntType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= BYTE 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ByteType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue x = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new BoolType(x.line, x.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_list 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> c = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new Program(i.line, i.pos, m, c);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

